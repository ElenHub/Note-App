/// <reference types="react" />
export interface BlockProps {
    name: string;
    display?: string;
    width?: string | number;
    minWidth?: string | number;
    height?: string | number;
    margin?: string | number;
    padding?: string | number;
    flexDirection?: string;
    justifyContent?: string;
    alignItems?: string;
    background?: string;
    boxShadow?: string;
    borderRadius?: number | string;
    minHeight?: number | string;
    flexWrap?: string;
    cursor?: string;
    border?: string;
    borderBottom?: string;
    borderTop?: string;
    borderLeft?: string;
    borderRight?: string;
    overflow?: string;
    overflowY?: string;
    overflowX?: string;
    table?: boolean;
}
/**
 * Styled Component ( Block )
 * Тег Див , display : flex
 * Переиспользуемый див блок на флексах с гибкой настройкой
 * Принимает в себя пропсы обычного див элемента и свои кастомные:
 * @param {string} name - Имя компоненты, никак не влияет на отрисовку, для удобства навигации
 * @param {string} display - тип блока ( по дефолту  = flex) ( не обязательный )
 * @param {string | number} width - ширина ( необязательный )
 * @param {string | number} minWidth - минимальная ширина ( необязательный )
 * @param {string | number} height - высота  ( необязательный )
 * @param {string | number} margin - отступы снаружи ( необязательный )
 * @param {string | number} padding - отстпу внутри ( необязательный )
 * @param {string} justifyContent - расположденеи по главной оси ( необязательный ) default = center
 * @param {string} alignItems - расположденеи по второстепенной оси ( необязательный )  default = center
 * @param {string} flexDirection - Направлении оси ( необязательный )  default = row
 * @param {string} background - задний фон ( необязательный )
 * @param {string} boxShadow - boxShadow - тень ( необязательный )
 * @param {number | string} borderRadius - Закругление границ блока ( необязательный )
 * @param {string} flexWrap - переносы блоков при отстутсвии места ( необязательный )
 * @param {string} cursor - курсор при наведение на блок (необзательный)
 * @param {string} border - границы блока ( необязательный )
 * @param {string} borderBottom - отдельно нижняя граница ( необязательный )
 * @param {string} borderTop - отдельно верхняя граница ( необязательный )
 * @param {string} borderLeft - отдельно левая граница ( необязательный )
 * @param {string} borderRight - отдельно правая     граница ( необязательный )
 * @param {string} overflow - режим отображенияя информации не вмещающейся в границы блока( необязательный )
 * @param {string} overflow-y - режим отображенияя информации не вмещающейся в границы блока по оси Y( необязательный )
 * @param {string} overflow-x - режим отображенияя информации не вмещающейся в границы блока по оси X( необязательный )
 */
export declare const Block: import("styled-components").StyledComponent<"div", any, BlockProps, never>;
export declare type StyledSvgProps = {
    margin?: string | number;
};
/**
 * Styled Component ( StyledSvg )
 * Тег Svg
 * Компонента обертка для свг иконок, с возможностью отступов
 * Принимает в себя пропсы :
 * @param {string | number} margin - отступы снаружи ( необязательный )
 */
export declare const StyledSvg: import("styled-components").StyledComponent<"svg", any, StyledSvgProps, never>;
export declare type StyledSelectProps = {
    width?: string | number;
    height?: string | number;
    padding?: string | number;
    border?: string | number;
};
/**
 * Styled Component ( StyledSelect )
 * Тег Select
 * Стилизованная комопнента селекта с возможность кастомизации
 * Принимает в себя пропсы :
 * @param {string | number} width - ширина ( необязательный )
 * @param {string | number} height - высота  ( необязательный )
 * @param {string | number} padding - отстпу внутри ( необязательный )
 * @param {string} border - границы блока ( необязательный )
 */
export declare const StyledSelect: import("styled-components").StyledComponent<(<T>(props: import("@mui/material").SelectProps<T>) => JSX.Element) & {
    muiName: string;
}, any, StyledSelectProps, never>;
declare type TextProps = {
    fontSize?: string | number;
    fontWeight?: string | number;
    font?: string;
    opacityText?: number;
    margin?: string | number;
    color?: string;
    cursor?: string;
    borderBottom?: string;
};
/**
 * Styled Component ( Text )
 * Тег span
 * Отображает текст со стандартными значениями
 * шрифт - Roboto Regular, размер - 16 , толщина 400
 * Принимает в себя пропсы :
 * @param {string } font - Шрифт ( необязательный )
 * @param {string } color - цвет текста ( необязательный )
 * @param {string | number} fontSize - Размер шрифта ( необязательный )
 * @param {string | number} fontWeight - Толщина шрифта ( необязательный )
 * @param {string | number} margin - отступы снаружи ( необязательный )
 * @param {string } cursor - иконка при наведении на текст( необязательный )
 * @param {string } borderBottom - нижняя граница текста( необязательный )
 */
export declare const Text: import("styled-components").StyledComponent<"span", any, TextProps, never>;
declare type StyledButtonProps = {
    width?: number | string;
    height?: number | string;
    borderRadius?: number | string;
    border?: string;
    background?: string;
    margin?: string | number;
    boxShadow?: string;
    color?: string;
};
/**
 * Styled Component ( StyledButton )
 * Тег button
 * Компонента кнопка, стилизованная под общий дизайн
 * Принимает в себя пропсы :
 * @param {string | number} width - ширина ( необязательный )
 * @param {string | number} height - высота  ( необязательный )
 * @param {string} border - границы блока ( необязательный )
 * @param {number | string} borderRadius - Закругление границ блока ( необязательный )
 * @param {string | number} margin - отступы снаружи ( необязательный )
 * @param {string } background - задний фон ( необязательный )
 * @param {string } boxShadow - тень ( необязательный )
 * @param {string } color - цвет текста ( необязательный )
 */
export declare const StyledButton: import("styled-components").StyledComponent<"button", any, StyledButtonProps, never>;
/**
 * Styled Component ( StyledKeyboardArrowDownIcon )
 * Тег KeyboardArrowDownIcon ( Material UI Icon)
 * Стилизованная иконка в которой добавлены
 * стили для коректногоо отображения кастомной иконки в селекторе
 * Пропсы не принимает
 */
export declare const StyledKeyboardArrowDownIcon: import("styled-components").StyledComponent<import("@mui/material/OverridableComponent").OverridableComponent<import("@mui/material").SvgIconTypeMap<{}, "svg">> & {
    muiName: string;
}, any, {}, never>;
export {};
